P2 == "Y" ~ 2,
P2 == "Z" ~ 3
)) %>%
mutate(result = case_when(
Pl1 == Pl2 ~ 3,
(Pl1 - Pl2)%%3 == 1 ~ 0,
(Pl1 - Pl2)%%3 == 2 ~ 6
)) %>%
mutate(total = result + Pl2)
rps %>% filter(P1 == "A",P2 =="Y")
rps %>% filter(P1 == "B",P2 =="X")
rps %>% filter(P1 == "C",P2 =="Z")
sum(rps$total)
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ P1,
R == "X" ~ (P1+1)%%3,
R == "X" ~  (P1 - 1) %% 3)) %>%
mutate(total = p_res + P2)
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1+1)%%3,
R == "X" ~  (Pl1 - 1) %% 3)) %>%
mutate(total = p_res + P2)
rps
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1+1)%%3,
R == "Z" ~  (Pl1 - 1) %% 3)) %>%
mutate(total = p_res + P2)
rps
rps %>% filter(P1=="A",p2 =="Y")
rps %>% filter(P1=="A",R =="Y")
rps %>% filter(P1=="B",R =="X")
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
rps %>% filter(P1=="B",R =="X")
rps %>% filter(P1=="C",R =="Z")
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
sum(rps$total)
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
rps
read_delim("A Y
B X
C Z")
read_delim("A Y
B X
C Z",col_names=c("A","D"))
read_delim("A Y
B X
C Z",col_names=c("P1","R"))
read_delim("A Y
B X
C Z",col_names=c("P1","R")) -> rps
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
รง
rps
sum(rps$total)
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
sum(rps$total)
read_delim("A Y
B X
C Z",col_names=c("P1","R")) -> rps
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
read_delim("A Y
B X
C Z",col_names=c("P1","R")) -> rps
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
rps
rps <- read_delim(here("input","d02_input.txt"),col_names = c("P1","R"))
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(total = p_res + P2)
rps
rps <- rps %>%
mutate(Pl1 = case_when(
P1 == "A" ~ 1,
P1 == "B" ~ 2,
P1 == "C" ~ 3
)) %>%
mutate(p_res = case_when(
R == "X" ~ 0,
R == "Y" ~ 3,
R == "Z" ~ 6
)) %>%
mutate(P2 = case_when(
R == "Y" ~ Pl1,
R == "X" ~ (Pl1-1)%%3,
R == "Z" ~  (Pl1 + 1) %% 3)) %>%
mutate(P2 = ifelse(P2 ==0, 3,P2)) %>%
mutate(total = p_res + P2)
sum(rps$total)
str <- c("vJrwpWtwJgWrhcsFMMfFFhFp","
jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL",
"PmmdzqPrVvPwwTWBwg")
str
library(stringr)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))
library(tidyverse)
library(purrr)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>%
map(.,sum)
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(stringr)
library(tidyverse)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>%
sum()
map_dfr(str, function(x)
str_detect(x,c(letters,LETTERS)))
map_dbl(str, function(x)
str_detect(x,c(letters,LETTERS)))
map_df(str, function(x)
str_detect(x,c(letters,LETTERS)))
map_lgl(str, function(x)
str_detect(x,c(letters,LETTERS)))
map(str, function(x)
str_detect(x,c(letters,LETTERS)))
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>%
unlist()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>%
transpose() %>%
sum()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>%
transpose() %>%
map(.,sum)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>%
transpose()
map(str, function(x)
str_detect(x,c(letters,LETTERS)))
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% transpose()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% transpose() %>% map(.,sum)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as.data.frame()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% tibble()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% t() %>% tibble()
map(str, function(x)
str_detect(x,c(letters,LETTERS)))
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% unlist(recursive = FALSE)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% data.frame()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% data.frame() %>% View()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = unique)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique")
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = sum(everything()))
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowsum())
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowsum(.))
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.))
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.)) %>% whic.max(t)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.)) %>% which.max(t)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.)) %>% pluck() %>% which.max()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.)) %>% pluck(t) %>% which.max()
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.)) %>% pluck(t)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.)) %>% pull(t)
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>% as_tibble(.name_repair = "unique") %>% mutate(t = rowSums(.)) %>% pull(t) %>% which.max()
find_badge <- function(str){
map(str, function(x)
str_detect(x,c(letters,LETTERS))) %>%
as_tibble(.name_repair = "unique") %>%
mutate(t = rowSums(.)) %>%
pull(t) %>%
which.max()
}
find_duplicate <- function(strA,strB){
str_detect(strA,c(letters,LETTERS))+
str_detect(strB,c(letters,LETTERS))-> C
which.max(C)
}
#find_duplicate(strA,strB)
d3_input <- data.frame(str = readLines(here("input","d03_input.txt")))
priorities <- d3_input %>%
mutate(L = str_length(str)) %>%
mutate(strA = str_sub(str,1,L/2),
strB = str_sub(str,L/2+1,L)) |>
rowwise() |>
mutate(priority = find_duplicate(strA,strB))
sum(priorities$priority)
elves_group <- d3_input %>%
mutate(id = row_number()) %>%
mutate(group = ceiling(id/3)) %>%
mutate(elf_in_group = id%%3 + 1) %>%
select(-id)
elves_group
elves_group %>%
group_by(group) %>%
summarise(max = find_badge(str))
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
reduce(.,sum)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
reduce(.,+)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
Reduce(.,sum)
รง
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
Reduce(sum,.)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
Reduce("+",.)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
reduce(.x = .,.f = sum)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
reduce(.x = .,.f = "+")
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
reduce(.x = .,+)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
reduce(.x = .,`+`)
map(str, function(x)
str_detect(x,c(letters,LETTERS)))%>%
reduce(.x = .,`+`) %>% which.max()
elves_group <- d3_input %>%
#  mutate(id = row_number()) %>%
mutate(group = ceiling(row_number()/3)) #%>%
# mutate(elf_in_group = id%%3 + 1) %>%
#select(-id)
find_badge <- function(str){
map(str, function(x)
str_detect(x,c(letters,LETTERS))
)%>%
reduce(.,`+`) %>%
which.max()
}
elves_group %>%
group_by(group) %>%
summarise(max = find_badge(str)) %>%
pull(max) %>%
sum()
elves_group <- d3_input %>%
#  mutate(id = row_number()) %>%
mutate(group = ceiling(row_number()/3)) #%>%
# mutate(elf_in_group = id%%3 + 1) %>%
#select(-id)
find_badge <- function(str){
map(str, function(x)
str_detect(x,c(letters,LETTERS))
)%>%
reduce(.,`+`) %>%
which.max()
}
d3_input %>%
mutate(group = ceiling(row_number()/3)) %>%
group_by(group) %>%
summarise(max = find_badge(str)) %>%
pull(max) %>%
sum()
d3_input %>%
mutate(group = ceiling(row_number()/3)) %>%
#    group_by(group) %>%
summarise(max = find_badge(str),.groups = group) %>%
pull(max) %>%
sum()
d3_input %>%
mutate(group = ceiling(row_number()/3)) %>%
#    group_by(group) %>%
summarise(max = find_badge(str),.groups = "group") %>%
pull(max) %>%
sum()
d3_input %>%
mutate(group = ceiling(row_number()/3)) %>%
group_by(group) %>%
summarise(max = find_badge(str)) %>%
pull(max) %>%
sum()
library(here)
library(tidyverse)
library(purrr)
assignments <- read_csv(here("input","input_04.txt"))
assignments <- read_csv(here("input","d04_input.txt"))
assignments
assignments <- read_csv(here("input","d04_input.txt"),col_names = c("elf1","elf2"))
assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-")
assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-",convert = TRUE)
assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-",convert = TRUE) %>%
separate(elf2,into=c("e2_min","e2_max"),sep="-",convert = TRUE)
%between%
between
part_A <- assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-",convert = TRUE) %>%
separate(elf2,into=c("e2_min","e2_max"),sep="-",convert = TRUE) %>%
mutate(inc_2_in_1 = between(e2_min,e1_min,e1_max) & between(e2_max,e1_min,e1_max)) %>%
mutate(inc_1_in_2 = between(e1_min,e2_min,e2_max) & between(e1_max,e2_min,e2_max)) %>%
mutate(included = inc_2_in_1 | inc_1_in_2)
part_A <- assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-",convert = TRUE) %>%
separate(elf2,into=c("e2_min","e2_max"),sep="-",convert = TRUE) %>%
mutate(inc_2_in_1 = between(e2_min,left = e1_min,right = e1_max) & between(e2_max,left= e1_min,right= e1_max))
part_A <- assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-",convert = TRUE) %>%
separate(elf2,into=c("e2_min","e2_max"),sep="-",convert = TRUE) %>%
rowwise() %>%
mutate(inc_2_in_1 = between(e2_min,left = e1_min,right = e1_max) & between(e2_max,left= e1_min,right= e1_max)) %>%
mutate(inc_1_in_2 = between(e1_min,e2_min,e2_max) & between(e1_max,e2_min,e2_max)) %>%
mutate(included = inc_2_in_1 | inc_1_in_2)
part_A
sum(part_A$included)
part_B <- assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-",convert = TRUE) %>%
separate(elf2,into=c("e2_min","e2_max"),sep="-",convert = TRUE) %>%
rowwise() %>%
mutate(inc_2_in_1 = between(e2_min,left = e1_min,right = e1_max) | between(e2_max,left= e1_min,right= e1_max))
sum(part_B$inc_2_in_1)
part_B
sum(part_B$inc_2_in_1)
DT::datatable(part_B)
part_B <- assignments %>%
separate(elf1,into=c("e1_min","e1_max"),sep="-",convert = TRUE) %>%
separate(elf2,into=c("e2_min","e2_max"),sep="-",convert = TRUE) %>%
rowwise() %>%
mutate(inc_2_in_1 = between(e2_min,left = e1_min,right = e1_max) | between(e2_max,left= e1_min,right= e1_max)) %>%
mutate(inc_1_in_2 = between(e1_min,left = e2_min,right = e2_max) | between(e1_max,left= e2_min,right= e2_max)) %>%
mutate(inc = inc_1_in_2 | inc_2_in_1)
sum(part_B$inc)
